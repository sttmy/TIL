# -*- coding: utf-8 -*-
"""230427 Jango.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iPz-tSvCB15nqHBFKuMnJzY0BGnz8tP5
"""

점프 투 장고
https://wikidocs.net/book/4223

게시판 https://django.pybo.kr/
깃허브 https://github.com/pahkey?tab=repositories
https://github.com/pahkey/djangobook 장고 소스코드

*웹프레임워크 종류
dJango
Flask
FastAPI

*준비하기

cmd창
cd\
mkdir venvs  # 가상환경 만들기
cd venvs  # 가상환경으로 이동
python -m venv mysite  # mysite라는 가상의 환경 만들기 venv라는 모듈 사용

GUI 
C >> venvs >> mysite >> Scripts
# activate 배치 파일을 구동해야 가상환경으로 들어가게 됨

cd mysite
cd Scripts
dir >> # activate.bat 배치 파일 있음
activate  # 가상환경에 진입!   <out> deactivate

(mysite) C:\venns\mysite\Scripts>pip install django==3.1.3  # 장고 패키지 설치

### pycharm
setting >> python interpreter >> add interpreter >> virtual environment >> 
mysite 아래 Scripts, python.exe 선택 : 가상환경에서 작업 가능

+ django specify version: 3.1.3 설치

python.exe -m pip install --upgrade pip  # python.exe 업데이트 (최신버전)

cls   # 화면지우기

지우고 cmd창 다시 실행

cd\
mkdir projects   # projects 디렉토리 생성
cd projects   # project 폴더 이동
# project 폴더: 파일이 저장되는 위치. 가상환경에서도 접근은 가능하나 구동은 안 됨. 패키지가 없음

### 한번에 가상환경으로 접속하는 방법
C:\venvs\mysite\Scripts\activate

(mysite) 
mkdir mysite # jango만 저장할 수 있는 dir생성: projects 폴더 내 mysite폴더 생성

django-admin startproject config .  # jango의 기본 베이스 파일 생성  
# *config: 설정이나 프로그램 실행 일부 등 저장해둔 파일. configuration 환경설정을 줄인 말. 초기 설정 구성에 사용되는 파일

python manage.py runserver   # manage.py 파이썬파일 구동
# >> 컴퓨터 IP주소 http://127.0.0.1:8000/
# 접속: 기본적으로 페이지가 하나 뜸. default값임. 새롭게 게시판 구현할 예정
# ctrl + C 를 (여러번) 누르면 종료됨

### 한번에 가상환경 접속 아웃
C:\venvs\mysite\Scripts\deactivate

(메모장) 파일(mysite.cmd) 만들기

@echo off
cd c:/projects/mysite
c:/venvs/mysite/scripts/activate

C:/venvs/mysite.cmd 에 저장

(cmd창) > 파일 위치 찾아가서 mysite.cmd 구동 # 번거로움....

# 환경변수 설정하기
윈도우키+R > (실행) sysdm.cpl > 시스템 속성
내컴퓨터 우클릭 > 속성 > 정보 > 고급시스템 설정
윈도우 설정 > 정보 > 고급시스템 섲어

고급 > 환경변수 > path > 편집 > 새로만들기
C:\venvs > 확인

(pycharm) 가상환경 설정 확인

File > Open > projects > mysite > 확인

# 사이트 한글로 변경
settings.py 파일 더블클릭

LANGUAGE_CODE = 'en-us' >> 'ko-kr'
TIME_ZONE = 'UTC' >> 'Asia/Seoul'
저장

(cmd창) 새로 실행 > mysite
python manage.py runserver
http://127.0.0.1:8000/ 실행: 한글이 보임

"""2장 장고의 기본 요소 익히기"""

(cmd창)
mysite
django-admin startapp pybo   # pybo라는 이름의 앱을 만들어줌
# > pycharm에 pybo 생성됨
db.sqlite3 # DB파일 생성

python manage.py runserver
(chrome) http://localhost:8000/pybo   # 404 에러가 뜸
# config/urls.py 파일에 요청한 pybo/ URL에 해당되는 매핑이 없다고 적혀 있음

(pycharm)
(config의 urls.py 파일)
import.... 확장
from pybo import views

path('pybo/', views.index),   # views.py 파일의 index함수


(views.py파일) 추가
from django.http import HttpResponse

def index(request):
    return HttpResponse("안녕하세요 pybo에 오신것을 환영합니다.")

전체 저장

(cmd) 
mysite
python manage.py runserver

(chrome) http://localhost:8000/pybo/ 다시 실행

# 기본적인 흐름
[1] 브라우저에서 로컬 서버로 http://localhost:8000/pybo 페이지를 요청하면
[2] urls.py 파일에서 /pybo URL 매핑을 확인하여 views.py 파일의 index 함수를 호출하고
[3] 호출한 결과를 브라우저에 반영한다.

# But 이대로라면 pybo와 관련된 URL 매핑을 추가할 때마다 config/urls.py 파일을 수정해야
(pycharm)
(config/urls.py 파일) 수정

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('pybo/', include('pybo.urls')), 
]

pybo 폴더에 (urls.py 파일) 생성

from django.urls import path
from . import views

urlpatterns = [
    path('',views.index),
]

"""2-02 모델 migrate"""

(pycharm)
(config > settings.py)

(cmd)
mysite
python manage.py migrate

(pycharm)
(pybo폴더 models.py) 정의

from django.db import models


class Question(models.Model):
    subject = models.CharField(max_length=200)    # 제목, 글자수제한 CharField
    content = models.TextField()                  # 내용, 글자수제한안함 TextField
    create_date = models.DateTimeField()          # 작성일시


class Answer(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)    # question 모델을 속성으로 연결
    # on_delete=models.CASCADE: 이 답변과 연결된 질문(Question)이 삭제될 경우 답변(Answer)도 함께 삭제
    content = models.TextField()
    create_date = models.DateTimeField()

(settings.py)   #pybo 앱을 installed_apps항목에 연결

(... 생략 ...)
INSTALLED_APPS = [
    'pybo.apps.PyboConfig',
    'django.contrib.admin',
     (... 생략 ...)
]
(... 생략 ...)

(cmd)
mysite
python manage.py migrate   # 제대로 실행이 안 됨
python manage.py makemigrations   # makemigrations를 하고 실행해야 함
python manage.py migrate   # 제대로 실행됨

# 모델 사용하기

python manage.py shell  # 장고를 통해 실행된 파이썬 shell
>>> # migration했던 table에 값을 입력할 수 있음

from pybo.models import Question, Answer
from django.utils import timezone
q = Question(subject = 'pybo가 무엇인가요?', content = 'pybo에 대해서 알고 싶습니다', create_date = timezone.now())
q.save()   # commit과 같은 역할
q.id   # primary key, 자동으로 증가
q = Question(subject = '장고 모델 질문입니다', content = 'id는 자동으로 생성되나요?', create_date = timezone.now()) 

# 조회
Question.objects.all()    # 저장한 데이터 조회, 모든 Question 데이터를 조회하는 함수

>>>>> <QuerySet [<Question: Question object (1)>, <Question: Question object (2)>]>

# 모델에 기능 추가
(models.py)
class Question(models.Model):
    (... 생략 ...)
    create_date = models.DateTimeField()

    def __str__(self):               # __str__ id값 대신 제목 표시
        return self.subject

(... 생략 ...)

(cmd창) quit()   # ctrl+Z 셸 종료

mysite
python manage.py shell  
>>> from pybo.models import Question, Answer
Question.objects.all()    # 다시 조회
>>>>>> <QuerySet [<Question: pybo가 무엇인가요?>, <Question: 장고 모델 질문입니다>]>

Question.objects.get(id=1)
Question.objects.get(id=3)
Question.objects.filter(subject__contains='장고')

# update 수정
q = Question.objects.get(id=2)
q.subject = 'Django Model Question'  # subject를 바꿔봄
q = Question.objects.get(id=2)    # 안바뀌어 있음 why? save하지 않아서
q.save()
Question.objects.get(id=2)     # 변경되어 있음

# 삭제
q = Question.objects.get(id=1)
q.delete()               # q의 내용을 장고에서 지워라. 삭제는 save 안해도 됨
Question.objects.all()   # 조회, id=1이 실제 삭제됨  id=2만 조회됨 
# q 를 찍어보면, 변수는 남아 있음. DB에서는 삭제함

# Answer 작성
q = Question.objects.get(id=2)
from django.utils import timezone
a = Answer(question=q, content='네 자동으로 생성됩니다.', create_date=timezone.now())
a.save()

# answer 조회
a.id
a = Answer.objects.get(id=1)
a.question

q.answer_set.all()    # 질문에 달린 댓글을 전부 조회 : set.all 질문은 하나, 답변은 여러개

"""2-03 장고관리자"""

(cmd)
python manage.py createsuperuser
사용자이름: admin
이메일주소: admin@mysite.com
Password: 1111 > y

python manage.py runserver

(chrome)
http://localhost:8000/admin/ 
로그인 admin / 1111

(pycharm)
(pybo > admin.py)

from django.contrib import admin
from.models import Question

admin.site.register(Question)    # question기능에 접근할 수 있도록 함

(chrome)
http://localhost:8000/admin/ 
question 추가 > 내용 작성 > 저장

# 검색기능 추가
(pycharm)
(admin.py)

from django.contrib import admin
from.models import Question

class QuestionAdmin(admin.ModelAdmin):      #QuestionAdmin 클래스를 생성, 
    search_fields = ['subject']             #제목 검색을 위한 subject를 추가

admin.site.register(Question, QuestionAdmin)

"""2-04 조회와 템플릿"""

# 페이지 요청시, 등록한 질문들 구현해보기
http://localhost:8000/pybo/ 

# 질문목록 출력되도록 view.py파일 index함수 변경

(pybo. views.py)
from django.shortcuts import render
from .models import Question

def index(request):
    question_list = Question.objects.order_by('-create_date')   # 질문목록데이터
    # order_by('-create_date'): 작성일시 역순으로 정렬, -는 역방향
    context = {'question_list': question_list}
    return render(request, 'pybo/question_list.html', context)

(settings.py)
(... 생략 ...)
TEMPLATES = [
    {(... 생략 ...)
     'DIRS': [BASE_DIR / 'templates'],
     (... 생략 ...)


# 디렉토리 생성
(cmd창)
mysite
mkdir templates    # templates 폴더 만들어주기

(pycharm)
templates 폴더 안에 pybo 폴더 만들기

모든 앱이 공통으로 사용할 템플릿 디렉터리 - projects/mysite/templates
pybo 앱이 사용할 템플릿 디렉터리 - projects/mysite/templates/pybo
common 앱이 사용할 템플릿 디렉터리 - projects/mysite/templates/common

# 템플릿파일 만들기
위치: projects/mysite/templates/pybo/question_list.html

{% if question_list %}
    <ul>
        {% for question in question_list %}
            <li><a href = "/pybo/{{ question.id }}/">{{ question.subject }}</a></li>
        {% endfor %}   
        
    </ul>
{% else %}
    <p> 질문이 없습니다</p>
{% endif %}


## {%    %} : 템플릿 태그

"""질문상세"""

# 질문 목록 클릭하면 조회되도록 연결
(pybo > urls.py)

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index),
    path('<int:question_id>/', views.detail), # question_id를 넣어주고, views.detail함수도 실행
]

# views.py에 detail함수 추가
(pybo > views.py) 

(... 생략 ...)
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    context = {'question': question}
    return render(request, 'pybo/question_detail.html', context)

# question_detail.html 추가
templates > pybo > question_detail.html 작성

<h1>{{ question.subject }}</h1>
<div>
    {{ question.content }}
</div><h1>{{ question.subject }}</h1>
<div>
    {{ question.content }}
</div>

"""오류메시지"""

http://localhost:8000/pybo/30/ 
>> 오류 화면

코드  /  설명
200   /  성공(OK) 
500   /  서버오류
404   /  서버가 요청한 페이지를 찾을 수 없음 not found

>> 없는 데이터를 요청할 경우 500 페이지 대신 404 페이지를 출력하도록 detail 함수를 수정!

(pycharm)
(pybo > views.py)

from django.shortcuts import render, get_object_or_404  # get_object_or_404 불러옴
(.... 생략 .....)

def detail(request, question_id):
    question = get_object_or_404(Question, pk = question_id)   # pk: primary key 기본키
    context = {'question': question}
    return render(request, 'pybo/question_detail.html', context)

"""2-05 URL 별칭"""

URL 링크의 구조가 자주 변경된다면 템플릿에서 사용한 모든 URL들을 링크 수정시마다 수정해야 함
따라서 해당 URL에 대한 실제 링크 대신, 링크의 주소가 1:1 매핑되어 있는 별칭을 사용

(pybo > urls.py)

(.....생략.....)
app_name = 'pybo'   ### name space: 다른 app에서 name중복 사용하면 혼란이 생기므로 namespace도 지정
urlpatterns = [
    path('', views.index, name='index'),   # name 추가
    path('<int:question_id>/', views.detail, name='detail'),   # name 추가
]


(question_list.html)

<li><a href = "{% url 'pybo:detail' question.id %}">{{ question.subject }}</a></li>
# question.id는 URL 매핑에 정의된 <int:question_id>에 전달해야 하는 값

"""2-06 데이터 저장"""

# 답변등록 폼 추가

(pybo > question_detail.html)
(... 생략... )
<form action="{% url 'pybo:answer_create' question.id %}" method="post">
# urls.py에 url 매핑해 만들고, views.py에 answer_create name으로 추가 필요
{% csrf_token %}     #보안 관련 토큰, form으로 전송한 데이터가 실제 웹 페이지에서 작성한 데이터인지 판단
<textarea name="content" id="content" rows="15"></textarea>   # 답변 입력할 수 있는 텍스트창
<input type="submit" value="답변등록">                        # 답변등록 버튼 추가
</form>

# urls.py
(pybo > urls.py)
(... 생략 ...)
urlpatterns = [
    path('answer/create/<int:question_id>/', views.answer_create, name='answer_create'),
]

# views.py
(pybo > views.py)
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone

(... 생략 ...)
def answer_create(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    question.answer_set.create(content=request.POST.get('content'), create_date=timezone.now())
    return redirect('pybo:detail', question_id=question.id)

(chrome)
답변등록 창 생성

답변 저장

# 답변조회

(pybo > question_detail.html)

<h5>{{ question.answer_set.count }}개의 답변이 있습니다.</h5>   # 답변 총 갯수 표시
<div>
    <ul>
    {% for answer in question.answer_set.all %}
        <li>{{ answer.content }}</li>
    {% endfor %}
    </ul>
</div>

(chrome)
답변등록 내용 표시

"""2-07 스태틱"""

스타일시트 stylesheet, CSS 파일 적용 위해 static directory 사용

(config > settings.py)

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

mysite 폴더 안에 static 폴더 생성

static폴더 안에 style.css file 생성

textarea{width: 100%;}
input[type = submit] {
    margin-top: 10px;}

(question_detail.html)
{% load static %}    # 최상단에 삽입
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">

"""2-08 부트스트랩"""

# 부트스트랩: 디자이너의 도움 없이도 개발자 혼자서 상당히 괜찮은 수준의 웹 페이지를 만들수 있게 도와주는 프레임워크
https://getbootstrap.com/docs/4.5/getting-started/download/ 4.5 버전 다운로드

bootstrap.min .css 파일을 static 폴더에 옮겨줌

(question_list.html)
{% load static %}    # 최상단에 입력
<link rel="stylesheet" type="text/css" href="{% static 'bootstrap.min.css' %}">
(....생략.....)

<div class = "container my-3">
    <table class="table">
        <thead>
        <tr class = "table-dark">
            <th>번호</th>
            <th>제목</th>
            <th>작성일시</th>
        </tr>
        </thead>
        <tbody>
        {% if question_list %}
        {% for question in question_list %}
        <tr>
            <td>{{ forloop.counter }}</td>
            <td>
                <a href = "{% url 'pybo:detail' question.id %}">{{ question.subject }}</a>
            </td>
            <td>{{ question.create_date }}</td>
        </tr>
        {% endfor %}
        {% else %}
        <tr>
            <td colspan = "3">질문이 없습니다</td>
        </tr>
        {% endif %}
        </tbody>
    </table>
</div>

(question_detail.html)  

{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'bootstrap.min.css' %}">
<div class="container my-3">
    <!-- 질문 -->
    <h2 class="border-bottom py-2">{{ question.subject }}</h2>
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ question.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ question.create_date }}
                </div>
            </div>
        </div>
    </div>
    <!-- 답변 -->
    <h5 class="border-bottom my-3 py-2">{{question.answer_set.count}}개의 답변이 있습니다.</h5>
    {% for answer in question.answer_set.all %}
    <div class="card my-3">
        <div class="card-body">
            <div class="card-text" style="white-space: pre-line;">{{ answer.content }}</div>
            <div class="d-flex justify-content-end">
                <div class="badge bg-light text-dark p-2">
                    {{ answer.create_date }}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
    <!-- 답변 등록 -->
    <form action="{% url 'pybo:answer_create' question.id %}" method="post" class="my-3">
        {% csrf_token %}
        <div class="mb-3">
            <label for="content" class="form-label">답변내용</label>
            <textarea name="content" id="content" class="form-control" rows="10"></textarea>
        </div>
        <input type="submit" value="답변등록" class="btn btn-primary">
    </form>
</div>